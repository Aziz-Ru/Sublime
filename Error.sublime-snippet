<snippet>
	<content><![CDATA[

void _print(int t) {cout<< t;}
void _print(string t) {cout << t;}
void _print(char t) {cout << t;}
void _print(double t) {cout << t;}
template <class T, class V> void _print(pair <T, V> p);
template <class T> void _print(vector <T> v);
template <class T> void _print(set <T> v);
template <class T, class V> void _print(map <T, V> v);
template <class T> void _print(multiset <T> v);
template <class T, class V> void _print(pair <T, V> p) { _print(p.ff); cout<< ","; _print(p.ss);}
template <class T> void _print(vector <T> v) {for (T i : v) {_print(i); cout<< " ";}}
template <class T> void _print(set <T> v) {for (T i : v) {_print(i); cout<< " ";}}
template <class T> void _print(multiset <T> v) {for (T i : v) {_print(i);cout<< " ";}}
template <class T, class V> void _print(map <T, V> v) {for (auto i : v) {_print(i); cout<< " ";} }


]]></content>
	<!-- Optional: Set a tabTrigger to define how to trigger the snippet -->
	 <tabTrigger>Error</tabTrigger> -->
	<!-- Optional: Set a scope to limit where the snippet will trigger -->
	 <scope>source.c++</scope> -->
</snippet>
